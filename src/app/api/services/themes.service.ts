/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiThemesGet$Json } from '../fn/themes/api-themes-get-json';
import { ApiThemesGet$Json$Params } from '../fn/themes/api-themes-get-json';
import { apiThemesGet$Plain } from '../fn/themes/api-themes-get-plain';
import { ApiThemesGet$Plain$Params } from '../fn/themes/api-themes-get-plain';
import { apiThemesUsersUserIdEffectiveGet$Json } from '../fn/themes/api-themes-users-user-id-effective-get-json';
import { ApiThemesUsersUserIdEffectiveGet$Json$Params } from '../fn/themes/api-themes-users-user-id-effective-get-json';
import { apiThemesUsersUserIdEffectiveGet$Plain } from '../fn/themes/api-themes-users-user-id-effective-get-plain';
import { ApiThemesUsersUserIdEffectiveGet$Plain$Params } from '../fn/themes/api-themes-users-user-id-effective-get-plain';
import { apiThemesUsersUserIdGet$Json } from '../fn/themes/api-themes-users-user-id-get-json';
import { ApiThemesUsersUserIdGet$Json$Params } from '../fn/themes/api-themes-users-user-id-get-json';
import { apiThemesUsersUserIdGet$Plain } from '../fn/themes/api-themes-users-user-id-get-plain';
import { ApiThemesUsersUserIdGet$Plain$Params } from '../fn/themes/api-themes-users-user-id-get-plain';
import { apiThemesUsersUserIdPut$Json } from '../fn/themes/api-themes-users-user-id-put-json';
import { ApiThemesUsersUserIdPut$Json$Params } from '../fn/themes/api-themes-users-user-id-put-json';
import { apiThemesUsersUserIdPut$Plain } from '../fn/themes/api-themes-users-user-id-put-plain';
import { ApiThemesUsersUserIdPut$Plain$Params } from '../fn/themes/api-themes-users-user-id-put-plain';
import { apiThemesUsersUserIdSyncPut$Json } from '../fn/themes/api-themes-users-user-id-sync-put-json';
import { ApiThemesUsersUserIdSyncPut$Json$Params } from '../fn/themes/api-themes-users-user-id-sync-put-json';
import { apiThemesUsersUserIdSyncPut$Plain } from '../fn/themes/api-themes-users-user-id-sync-put-plain';
import { ApiThemesUsersUserIdSyncPut$Plain$Params } from '../fn/themes/api-themes-users-user-id-sync-put-plain';
import { ThemeDtoApiResponse } from '../models/theme-dto-api-response';
import { ThemeDtoIEnumerableApiResponse } from '../models/theme-dto-i-enumerable-api-response';
import { UserThemeDtoApiResponse } from '../models/user-theme-dto-api-response';

@Injectable({ providedIn: 'root' })
export class ThemesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiThemesGet()` */
  static readonly ApiThemesGetPath = '/api/Themes';

  /**
   * Gets all available themes.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesGet$Plain$Response(params?: ApiThemesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ThemeDtoIEnumerableApiResponse>> {
    return apiThemesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all available themes.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesGet$Plain(params?: ApiThemesGet$Plain$Params, context?: HttpContext): Observable<ThemeDtoIEnumerableApiResponse> {
    return this.apiThemesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ThemeDtoIEnumerableApiResponse>): ThemeDtoIEnumerableApiResponse => r.body)
    );
  }

  /**
   * Gets all available themes.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesGet$Json$Response(params?: ApiThemesGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ThemeDtoIEnumerableApiResponse>> {
    return apiThemesGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all available themes.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesGet$Json(params?: ApiThemesGet$Json$Params, context?: HttpContext): Observable<ThemeDtoIEnumerableApiResponse> {
    return this.apiThemesGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ThemeDtoIEnumerableApiResponse>): ThemeDtoIEnumerableApiResponse => r.body)
    );
  }

  /** Path part for operation `apiThemesUsersUserIdGet()` */
  static readonly ApiThemesUsersUserIdGetPath = '/api/Themes/users/{userId}';

  /**
   * Gets theme preferences for a specific user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUsersUserIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUsersUserIdGet$Plain$Response(params: ApiThemesUsersUserIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserThemeDtoApiResponse>> {
    return apiThemesUsersUserIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets theme preferences for a specific user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUsersUserIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUsersUserIdGet$Plain(params: ApiThemesUsersUserIdGet$Plain$Params, context?: HttpContext): Observable<UserThemeDtoApiResponse> {
    return this.apiThemesUsersUserIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserThemeDtoApiResponse>): UserThemeDtoApiResponse => r.body)
    );
  }

  /**
   * Gets theme preferences for a specific user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUsersUserIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUsersUserIdGet$Json$Response(params: ApiThemesUsersUserIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserThemeDtoApiResponse>> {
    return apiThemesUsersUserIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets theme preferences for a specific user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUsersUserIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUsersUserIdGet$Json(params: ApiThemesUsersUserIdGet$Json$Params, context?: HttpContext): Observable<UserThemeDtoApiResponse> {
    return this.apiThemesUsersUserIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserThemeDtoApiResponse>): UserThemeDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiThemesUsersUserIdPut()` */
  static readonly ApiThemesUsersUserIdPutPath = '/api/Themes/users/{userId}';

  /**
   * Updates theme preferences for a specific user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUsersUserIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiThemesUsersUserIdPut$Plain$Response(params: ApiThemesUsersUserIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserThemeDtoApiResponse>> {
    return apiThemesUsersUserIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates theme preferences for a specific user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUsersUserIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiThemesUsersUserIdPut$Plain(params: ApiThemesUsersUserIdPut$Plain$Params, context?: HttpContext): Observable<UserThemeDtoApiResponse> {
    return this.apiThemesUsersUserIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserThemeDtoApiResponse>): UserThemeDtoApiResponse => r.body)
    );
  }

  /**
   * Updates theme preferences for a specific user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUsersUserIdPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiThemesUsersUserIdPut$Json$Response(params: ApiThemesUsersUserIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserThemeDtoApiResponse>> {
    return apiThemesUsersUserIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates theme preferences for a specific user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUsersUserIdPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiThemesUsersUserIdPut$Json(params: ApiThemesUsersUserIdPut$Json$Params, context?: HttpContext): Observable<UserThemeDtoApiResponse> {
    return this.apiThemesUsersUserIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserThemeDtoApiResponse>): UserThemeDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiThemesUsersUserIdSyncPut()` */
  static readonly ApiThemesUsersUserIdSyncPutPath = '/api/Themes/users/{userId}/sync';

  /**
   * Updates system sync preference for a specific user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUsersUserIdSyncPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiThemesUsersUserIdSyncPut$Plain$Response(params: ApiThemesUsersUserIdSyncPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserThemeDtoApiResponse>> {
    return apiThemesUsersUserIdSyncPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates system sync preference for a specific user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUsersUserIdSyncPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiThemesUsersUserIdSyncPut$Plain(params: ApiThemesUsersUserIdSyncPut$Plain$Params, context?: HttpContext): Observable<UserThemeDtoApiResponse> {
    return this.apiThemesUsersUserIdSyncPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserThemeDtoApiResponse>): UserThemeDtoApiResponse => r.body)
    );
  }

  /**
   * Updates system sync preference for a specific user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUsersUserIdSyncPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiThemesUsersUserIdSyncPut$Json$Response(params: ApiThemesUsersUserIdSyncPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserThemeDtoApiResponse>> {
    return apiThemesUsersUserIdSyncPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates system sync preference for a specific user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUsersUserIdSyncPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiThemesUsersUserIdSyncPut$Json(params: ApiThemesUsersUserIdSyncPut$Json$Params, context?: HttpContext): Observable<UserThemeDtoApiResponse> {
    return this.apiThemesUsersUserIdSyncPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserThemeDtoApiResponse>): UserThemeDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiThemesUsersUserIdEffectiveGet()` */
  static readonly ApiThemesUsersUserIdEffectiveGetPath = '/api/Themes/users/{userId}/effective';

  /**
   * Gets the effective theme for a user based on their preferences and system settings.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUsersUserIdEffectiveGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUsersUserIdEffectiveGet$Plain$Response(params: ApiThemesUsersUserIdEffectiveGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ThemeDtoApiResponse>> {
    return apiThemesUsersUserIdEffectiveGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the effective theme for a user based on their preferences and system settings.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUsersUserIdEffectiveGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUsersUserIdEffectiveGet$Plain(params: ApiThemesUsersUserIdEffectiveGet$Plain$Params, context?: HttpContext): Observable<ThemeDtoApiResponse> {
    return this.apiThemesUsersUserIdEffectiveGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ThemeDtoApiResponse>): ThemeDtoApiResponse => r.body)
    );
  }

  /**
   * Gets the effective theme for a user based on their preferences and system settings.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUsersUserIdEffectiveGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUsersUserIdEffectiveGet$Json$Response(params: ApiThemesUsersUserIdEffectiveGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ThemeDtoApiResponse>> {
    return apiThemesUsersUserIdEffectiveGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the effective theme for a user based on their preferences and system settings.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUsersUserIdEffectiveGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUsersUserIdEffectiveGet$Json(params: ApiThemesUsersUserIdEffectiveGet$Json$Params, context?: HttpContext): Observable<ThemeDtoApiResponse> {
    return this.apiThemesUsersUserIdEffectiveGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ThemeDtoApiResponse>): ThemeDtoApiResponse => r.body)
    );
  }

}
