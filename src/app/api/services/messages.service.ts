/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiGroupsGroupIdMessagesGet$Json } from '../fn/messages/api-groups-group-id-messages-get-json';
import { ApiGroupsGroupIdMessagesGet$Json$Params } from '../fn/messages/api-groups-group-id-messages-get-json';
import { apiGroupsGroupIdMessagesGet$Plain } from '../fn/messages/api-groups-group-id-messages-get-plain';
import { ApiGroupsGroupIdMessagesGet$Plain$Params } from '../fn/messages/api-groups-group-id-messages-get-plain';
import { apiGroupsGroupIdMessagesMessageIdGet$Json } from '../fn/messages/api-groups-group-id-messages-message-id-get-json';
import { ApiGroupsGroupIdMessagesMessageIdGet$Json$Params } from '../fn/messages/api-groups-group-id-messages-message-id-get-json';
import { apiGroupsGroupIdMessagesMessageIdGet$Plain } from '../fn/messages/api-groups-group-id-messages-message-id-get-plain';
import { ApiGroupsGroupIdMessagesMessageIdGet$Plain$Params } from '../fn/messages/api-groups-group-id-messages-message-id-get-plain';
import { apiGroupsGroupIdMessagesPost$Json } from '../fn/messages/api-groups-group-id-messages-post-json';
import { ApiGroupsGroupIdMessagesPost$Json$Params } from '../fn/messages/api-groups-group-id-messages-post-json';
import { apiGroupsGroupIdMessagesPost$Plain } from '../fn/messages/api-groups-group-id-messages-post-plain';
import { ApiGroupsGroupIdMessagesPost$Plain$Params } from '../fn/messages/api-groups-group-id-messages-post-plain';
import { MessageDtoApiResponse } from '../models/message-dto-api-response';
import { MessageDtoIEnumerableApiResponse } from '../models/message-dto-i-enumerable-api-response';

@Injectable({ providedIn: 'root' })
export class MessagesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiGroupsGroupIdMessagesGet()` */
  static readonly ApiGroupsGroupIdMessagesGetPath = '/api/groups/{groupId}/messages';

  /**
   * Gets messages for a group with pagination.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsGroupIdMessagesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGroupIdMessagesGet$Plain$Response(params: ApiGroupsGroupIdMessagesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageDtoIEnumerableApiResponse>> {
    return apiGroupsGroupIdMessagesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets messages for a group with pagination.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsGroupIdMessagesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGroupIdMessagesGet$Plain(params: ApiGroupsGroupIdMessagesGet$Plain$Params, context?: HttpContext): Observable<MessageDtoIEnumerableApiResponse> {
    return this.apiGroupsGroupIdMessagesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageDtoIEnumerableApiResponse>): MessageDtoIEnumerableApiResponse => r.body)
    );
  }

  /**
   * Gets messages for a group with pagination.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsGroupIdMessagesGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGroupIdMessagesGet$Json$Response(params: ApiGroupsGroupIdMessagesGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageDtoIEnumerableApiResponse>> {
    return apiGroupsGroupIdMessagesGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets messages for a group with pagination.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsGroupIdMessagesGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGroupIdMessagesGet$Json(params: ApiGroupsGroupIdMessagesGet$Json$Params, context?: HttpContext): Observable<MessageDtoIEnumerableApiResponse> {
    return this.apiGroupsGroupIdMessagesGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageDtoIEnumerableApiResponse>): MessageDtoIEnumerableApiResponse => r.body)
    );
  }

  /** Path part for operation `apiGroupsGroupIdMessagesPost()` */
  static readonly ApiGroupsGroupIdMessagesPostPath = '/api/groups/{groupId}/messages';

  /**
   * Sends a message to a group (REST fallback endpoint).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsGroupIdMessagesPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsGroupIdMessagesPost$Plain$Response(params: ApiGroupsGroupIdMessagesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageDtoApiResponse>> {
    return apiGroupsGroupIdMessagesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Sends a message to a group (REST fallback endpoint).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsGroupIdMessagesPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsGroupIdMessagesPost$Plain(params: ApiGroupsGroupIdMessagesPost$Plain$Params, context?: HttpContext): Observable<MessageDtoApiResponse> {
    return this.apiGroupsGroupIdMessagesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageDtoApiResponse>): MessageDtoApiResponse => r.body)
    );
  }

  /**
   * Sends a message to a group (REST fallback endpoint).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsGroupIdMessagesPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsGroupIdMessagesPost$Json$Response(params: ApiGroupsGroupIdMessagesPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageDtoApiResponse>> {
    return apiGroupsGroupIdMessagesPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Sends a message to a group (REST fallback endpoint).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsGroupIdMessagesPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsGroupIdMessagesPost$Json(params: ApiGroupsGroupIdMessagesPost$Json$Params, context?: HttpContext): Observable<MessageDtoApiResponse> {
    return this.apiGroupsGroupIdMessagesPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageDtoApiResponse>): MessageDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiGroupsGroupIdMessagesMessageIdGet()` */
  static readonly ApiGroupsGroupIdMessagesMessageIdGetPath = '/api/groups/{groupId}/messages/{messageId}';

  /**
   * Gets a specific message by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsGroupIdMessagesMessageIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGroupIdMessagesMessageIdGet$Plain$Response(params: ApiGroupsGroupIdMessagesMessageIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageDtoApiResponse>> {
    return apiGroupsGroupIdMessagesMessageIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a specific message by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsGroupIdMessagesMessageIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGroupIdMessagesMessageIdGet$Plain(params: ApiGroupsGroupIdMessagesMessageIdGet$Plain$Params, context?: HttpContext): Observable<MessageDtoApiResponse> {
    return this.apiGroupsGroupIdMessagesMessageIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageDtoApiResponse>): MessageDtoApiResponse => r.body)
    );
  }

  /**
   * Gets a specific message by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsGroupIdMessagesMessageIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGroupIdMessagesMessageIdGet$Json$Response(params: ApiGroupsGroupIdMessagesMessageIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageDtoApiResponse>> {
    return apiGroupsGroupIdMessagesMessageIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a specific message by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsGroupIdMessagesMessageIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGroupIdMessagesMessageIdGet$Json(params: ApiGroupsGroupIdMessagesMessageIdGet$Json$Params, context?: HttpContext): Observable<MessageDtoApiResponse> {
    return this.apiGroupsGroupIdMessagesMessageIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageDtoApiResponse>): MessageDtoApiResponse => r.body)
    );
  }

}
