/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiThemesGet } from '../fn/dynamic-themes/api-themes-get';
import { ApiThemesGet$Params } from '../fn/dynamic-themes/api-themes-get';
import { apiThemesThemeIdGet } from '../fn/dynamic-themes/api-themes-theme-id-get';
import { ApiThemesThemeIdGet$Params } from '../fn/dynamic-themes/api-themes-theme-id-get';
import { apiThemesUserEffectiveGet } from '../fn/dynamic-themes/api-themes-user-effective-get';
import { ApiThemesUserEffectiveGet$Params } from '../fn/dynamic-themes/api-themes-user-effective-get';
import { apiThemesUserGet } from '../fn/dynamic-themes/api-themes-user-get';
import { ApiThemesUserGet$Params } from '../fn/dynamic-themes/api-themes-user-get';
import { apiThemesUserPost } from '../fn/dynamic-themes/api-themes-user-post';
import { ApiThemesUserPost$Params } from '../fn/dynamic-themes/api-themes-user-post';
import { DynamicThemeDtoApiResponse } from '../models/dynamic-theme-dto-api-response';
import { DynamicThemeDtoIEnumerableApiResponse } from '../models/dynamic-theme-dto-i-enumerable-api-response';
import { DynamicUserThemeDtoApiResponse } from '../models/dynamic-user-theme-dto-api-response';
import { EffectiveThemeDtoApiResponse } from '../models/effective-theme-dto-api-response';

@Injectable({ providedIn: 'root' })
export class DynamicThemesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiThemesGet()` */
  static readonly ApiThemesGetPath = '/api/themes';

  /**
   * Gets all available themes with all accent variants and dynamic tokens (Public API).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesGet$Response(params?: ApiThemesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<DynamicThemeDtoIEnumerableApiResponse>> {
    return apiThemesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all available themes with all accent variants and dynamic tokens (Public API).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesGet(params?: ApiThemesGet$Params, context?: HttpContext): Observable<DynamicThemeDtoIEnumerableApiResponse> {
    return this.apiThemesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<DynamicThemeDtoIEnumerableApiResponse>): DynamicThemeDtoIEnumerableApiResponse => r.body)
    );
  }

  /** Path part for operation `apiThemesThemeIdGet()` */
  static readonly ApiThemesThemeIdGetPath = '/api/themes/{themeId}';

  /**
   * Gets a specific theme with its accent variants and dynamic tokens (Public API).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesThemeIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesThemeIdGet$Response(params: ApiThemesThemeIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<DynamicThemeDtoApiResponse>> {
    return apiThemesThemeIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets a specific theme with its accent variants and dynamic tokens (Public API).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesThemeIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesThemeIdGet(params: ApiThemesThemeIdGet$Params, context?: HttpContext): Observable<DynamicThemeDtoApiResponse> {
    return this.apiThemesThemeIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<DynamicThemeDtoApiResponse>): DynamicThemeDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiThemesUserGet()` */
  static readonly ApiThemesUserGetPath = '/api/themes/user';

  /**
   * Gets current user's theme preference (Protected API)
   * Returns selected theme + accent variant, SyncWithSystem, and default Light + Dark + default accents for first-time login.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUserGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUserGet$Response(params?: ApiThemesUserGet$Params, context?: HttpContext): Observable<StrictHttpResponse<DynamicUserThemeDtoApiResponse>> {
    return apiThemesUserGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets current user's theme preference (Protected API)
   * Returns selected theme + accent variant, SyncWithSystem, and default Light + Dark + default accents for first-time login.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUserGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUserGet(params?: ApiThemesUserGet$Params, context?: HttpContext): Observable<DynamicUserThemeDtoApiResponse> {
    return this.apiThemesUserGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<DynamicUserThemeDtoApiResponse>): DynamicUserThemeDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiThemesUserPost()` */
  static readonly ApiThemesUserPostPath = '/api/themes/user';

  /**
   * Saves/updates user's theme preference (Protected API)
   * Persists instantly when user changes theme in UI.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUserPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiThemesUserPost$Response(params?: ApiThemesUserPost$Params, context?: HttpContext): Observable<StrictHttpResponse<DynamicUserThemeDtoApiResponse>> {
    return apiThemesUserPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Saves/updates user's theme preference (Protected API)
   * Persists instantly when user changes theme in UI.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUserPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiThemesUserPost(params?: ApiThemesUserPost$Params, context?: HttpContext): Observable<DynamicUserThemeDtoApiResponse> {
    return this.apiThemesUserPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<DynamicUserThemeDtoApiResponse>): DynamicUserThemeDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiThemesUserEffectiveGet()` */
  static readonly ApiThemesUserEffectiveGetPath = '/api/themes/user/effective';

  /**
   * Gets the effective theme for the current user based on their preferences and system settings (Protected API).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiThemesUserEffectiveGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUserEffectiveGet$Response(params?: ApiThemesUserEffectiveGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EffectiveThemeDtoApiResponse>> {
    return apiThemesUserEffectiveGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the effective theme for the current user based on their preferences and system settings (Protected API).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiThemesUserEffectiveGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiThemesUserEffectiveGet(params?: ApiThemesUserEffectiveGet$Params, context?: HttpContext): Observable<EffectiveThemeDtoApiResponse> {
    return this.apiThemesUserEffectiveGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EffectiveThemeDtoApiResponse>): EffectiveThemeDtoApiResponse => r.body)
    );
  }

}
