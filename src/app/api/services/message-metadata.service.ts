/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiMessagesMessageIdForwardTargetGroupIdPost$Json } from '../fn/message-metadata/api-messages-message-id-forward-target-group-id-post-json';
import { ApiMessagesMessageIdForwardTargetGroupIdPost$Json$Params } from '../fn/message-metadata/api-messages-message-id-forward-target-group-id-post-json';
import { apiMessagesMessageIdForwardTargetGroupIdPost$Plain } from '../fn/message-metadata/api-messages-message-id-forward-target-group-id-post-plain';
import { ApiMessagesMessageIdForwardTargetGroupIdPost$Plain$Params } from '../fn/message-metadata/api-messages-message-id-forward-target-group-id-post-plain';
import { apiMessagesMessageIdReactionsDelete$Json } from '../fn/message-metadata/api-messages-message-id-reactions-delete-json';
import { ApiMessagesMessageIdReactionsDelete$Json$Params } from '../fn/message-metadata/api-messages-message-id-reactions-delete-json';
import { apiMessagesMessageIdReactionsDelete$Plain } from '../fn/message-metadata/api-messages-message-id-reactions-delete-plain';
import { ApiMessagesMessageIdReactionsDelete$Plain$Params } from '../fn/message-metadata/api-messages-message-id-reactions-delete-plain';
import { apiMessagesMessageIdReactionsEmojiPost$Json } from '../fn/message-metadata/api-messages-message-id-reactions-emoji-post-json';
import { ApiMessagesMessageIdReactionsEmojiPost$Json$Params } from '../fn/message-metadata/api-messages-message-id-reactions-emoji-post-json';
import { apiMessagesMessageIdReactionsEmojiPost$Plain } from '../fn/message-metadata/api-messages-message-id-reactions-emoji-post-plain';
import { ApiMessagesMessageIdReactionsEmojiPost$Plain$Params } from '../fn/message-metadata/api-messages-message-id-reactions-emoji-post-plain';
import { apiMessagesMessageIdReadPost$Json } from '../fn/message-metadata/api-messages-message-id-read-post-json';
import { ApiMessagesMessageIdReadPost$Json$Params } from '../fn/message-metadata/api-messages-message-id-read-post-json';
import { apiMessagesMessageIdReadPost$Plain } from '../fn/message-metadata/api-messages-message-id-read-post-plain';
import { ApiMessagesMessageIdReadPost$Plain$Params } from '../fn/message-metadata/api-messages-message-id-read-post-plain';
import { GuidApiResponse } from '../models/guid-api-response';
import { MessageMetadataApiResponse } from '../models/message-metadata-api-response';

@Injectable({ providedIn: 'root' })
export class MessageMetadataService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiMessagesMessageIdReactionsEmojiPost()` */
  static readonly ApiMessagesMessageIdReactionsEmojiPostPath = '/api/messages/{messageId}/reactions/{emoji}';

  /**
   * Adds a reaction to a message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMessagesMessageIdReactionsEmojiPost$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReactionsEmojiPost$Plain$Response(params: ApiMessagesMessageIdReactionsEmojiPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageMetadataApiResponse>> {
    return apiMessagesMessageIdReactionsEmojiPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Adds a reaction to a message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMessagesMessageIdReactionsEmojiPost$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReactionsEmojiPost$Plain(params: ApiMessagesMessageIdReactionsEmojiPost$Plain$Params, context?: HttpContext): Observable<MessageMetadataApiResponse> {
    return this.apiMessagesMessageIdReactionsEmojiPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageMetadataApiResponse>): MessageMetadataApiResponse => r.body)
    );
  }

  /**
   * Adds a reaction to a message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMessagesMessageIdReactionsEmojiPost$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReactionsEmojiPost$Json$Response(params: ApiMessagesMessageIdReactionsEmojiPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageMetadataApiResponse>> {
    return apiMessagesMessageIdReactionsEmojiPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Adds a reaction to a message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMessagesMessageIdReactionsEmojiPost$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReactionsEmojiPost$Json(params: ApiMessagesMessageIdReactionsEmojiPost$Json$Params, context?: HttpContext): Observable<MessageMetadataApiResponse> {
    return this.apiMessagesMessageIdReactionsEmojiPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageMetadataApiResponse>): MessageMetadataApiResponse => r.body)
    );
  }

  /** Path part for operation `apiMessagesMessageIdReactionsDelete()` */
  static readonly ApiMessagesMessageIdReactionsDeletePath = '/api/messages/{messageId}/reactions';

  /**
   * Removes a reaction from a message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMessagesMessageIdReactionsDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReactionsDelete$Plain$Response(params: ApiMessagesMessageIdReactionsDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageMetadataApiResponse>> {
    return apiMessagesMessageIdReactionsDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Removes a reaction from a message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMessagesMessageIdReactionsDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReactionsDelete$Plain(params: ApiMessagesMessageIdReactionsDelete$Plain$Params, context?: HttpContext): Observable<MessageMetadataApiResponse> {
    return this.apiMessagesMessageIdReactionsDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageMetadataApiResponse>): MessageMetadataApiResponse => r.body)
    );
  }

  /**
   * Removes a reaction from a message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMessagesMessageIdReactionsDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReactionsDelete$Json$Response(params: ApiMessagesMessageIdReactionsDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageMetadataApiResponse>> {
    return apiMessagesMessageIdReactionsDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Removes a reaction from a message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMessagesMessageIdReactionsDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReactionsDelete$Json(params: ApiMessagesMessageIdReactionsDelete$Json$Params, context?: HttpContext): Observable<MessageMetadataApiResponse> {
    return this.apiMessagesMessageIdReactionsDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageMetadataApiResponse>): MessageMetadataApiResponse => r.body)
    );
  }

  /** Path part for operation `apiMessagesMessageIdReadPost()` */
  static readonly ApiMessagesMessageIdReadPostPath = '/api/messages/{messageId}/read';

  /**
   * Marks a message as read.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMessagesMessageIdReadPost$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReadPost$Plain$Response(params: ApiMessagesMessageIdReadPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageMetadataApiResponse>> {
    return apiMessagesMessageIdReadPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks a message as read.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMessagesMessageIdReadPost$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReadPost$Plain(params: ApiMessagesMessageIdReadPost$Plain$Params, context?: HttpContext): Observable<MessageMetadataApiResponse> {
    return this.apiMessagesMessageIdReadPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageMetadataApiResponse>): MessageMetadataApiResponse => r.body)
    );
  }

  /**
   * Marks a message as read.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMessagesMessageIdReadPost$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReadPost$Json$Response(params: ApiMessagesMessageIdReadPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageMetadataApiResponse>> {
    return apiMessagesMessageIdReadPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks a message as read.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMessagesMessageIdReadPost$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdReadPost$Json(params: ApiMessagesMessageIdReadPost$Json$Params, context?: HttpContext): Observable<MessageMetadataApiResponse> {
    return this.apiMessagesMessageIdReadPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageMetadataApiResponse>): MessageMetadataApiResponse => r.body)
    );
  }

  /** Path part for operation `apiMessagesMessageIdForwardTargetGroupIdPost()` */
  static readonly ApiMessagesMessageIdForwardTargetGroupIdPostPath = '/api/messages/{messageId}/forward/{targetGroupId}';

  /**
   * Forwards a message to another group.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMessagesMessageIdForwardTargetGroupIdPost$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdForwardTargetGroupIdPost$Plain$Response(params: ApiMessagesMessageIdForwardTargetGroupIdPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GuidApiResponse>> {
    return apiMessagesMessageIdForwardTargetGroupIdPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Forwards a message to another group.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMessagesMessageIdForwardTargetGroupIdPost$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdForwardTargetGroupIdPost$Plain(params: ApiMessagesMessageIdForwardTargetGroupIdPost$Plain$Params, context?: HttpContext): Observable<GuidApiResponse> {
    return this.apiMessagesMessageIdForwardTargetGroupIdPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GuidApiResponse>): GuidApiResponse => r.body)
    );
  }

  /**
   * Forwards a message to another group.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMessagesMessageIdForwardTargetGroupIdPost$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdForwardTargetGroupIdPost$Json$Response(params: ApiMessagesMessageIdForwardTargetGroupIdPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GuidApiResponse>> {
    return apiMessagesMessageIdForwardTargetGroupIdPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Forwards a message to another group.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMessagesMessageIdForwardTargetGroupIdPost$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMessagesMessageIdForwardTargetGroupIdPost$Json(params: ApiMessagesMessageIdForwardTargetGroupIdPost$Json$Params, context?: HttpContext): Observable<GuidApiResponse> {
    return this.apiMessagesMessageIdForwardTargetGroupIdPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GuidApiResponse>): GuidApiResponse => r.body)
    );
  }

}
