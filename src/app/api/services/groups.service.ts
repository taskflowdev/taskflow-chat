/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiGroupsGet$Json } from '../fn/groups/api-groups-get-json';
import { ApiGroupsGet$Json$Params } from '../fn/groups/api-groups-get-json';
import { apiGroupsGet$Plain } from '../fn/groups/api-groups-get-plain';
import { ApiGroupsGet$Plain$Params } from '../fn/groups/api-groups-get-plain';
import { apiGroupsIdDelete$Json } from '../fn/groups/api-groups-id-delete-json';
import { ApiGroupsIdDelete$Json$Params } from '../fn/groups/api-groups-id-delete-json';
import { apiGroupsIdDelete$Plain } from '../fn/groups/api-groups-id-delete-plain';
import { ApiGroupsIdDelete$Plain$Params } from '../fn/groups/api-groups-id-delete-plain';
import { apiGroupsIdGet$Json } from '../fn/groups/api-groups-id-get-json';
import { ApiGroupsIdGet$Json$Params } from '../fn/groups/api-groups-id-get-json';
import { apiGroupsIdGet$Plain } from '../fn/groups/api-groups-id-get-plain';
import { ApiGroupsIdGet$Plain$Params } from '../fn/groups/api-groups-id-get-plain';
import { apiGroupsIdLeavePost$Json } from '../fn/groups/api-groups-id-leave-post-json';
import { ApiGroupsIdLeavePost$Json$Params } from '../fn/groups/api-groups-id-leave-post-json';
import { apiGroupsIdLeavePost$Plain } from '../fn/groups/api-groups-id-leave-post-plain';
import { ApiGroupsIdLeavePost$Plain$Params } from '../fn/groups/api-groups-id-leave-post-plain';
import { apiGroupsIdMembersGet$Json } from '../fn/groups/api-groups-id-members-get-json';
import { ApiGroupsIdMembersGet$Json$Params } from '../fn/groups/api-groups-id-members-get-json';
import { apiGroupsIdMembersGet$Plain } from '../fn/groups/api-groups-id-members-get-plain';
import { ApiGroupsIdMembersGet$Plain$Params } from '../fn/groups/api-groups-id-members-get-plain';
import { apiGroupsIdMembersUserIdMakeAdminPost$Json } from '../fn/groups/api-groups-id-members-user-id-make-admin-post-json';
import { ApiGroupsIdMembersUserIdMakeAdminPost$Json$Params } from '../fn/groups/api-groups-id-members-user-id-make-admin-post-json';
import { apiGroupsIdMembersUserIdMakeAdminPost$Plain } from '../fn/groups/api-groups-id-members-user-id-make-admin-post-plain';
import { ApiGroupsIdMembersUserIdMakeAdminPost$Plain$Params } from '../fn/groups/api-groups-id-members-user-id-make-admin-post-plain';
import { apiGroupsIdNamePut$Json } from '../fn/groups/api-groups-id-name-put-json';
import { ApiGroupsIdNamePut$Json$Params } from '../fn/groups/api-groups-id-name-put-json';
import { apiGroupsIdNamePut$Plain } from '../fn/groups/api-groups-id-name-put-plain';
import { ApiGroupsIdNamePut$Plain$Params } from '../fn/groups/api-groups-id-name-put-plain';
import { apiGroupsIdRegenerateInvitePost$Json } from '../fn/groups/api-groups-id-regenerate-invite-post-json';
import { ApiGroupsIdRegenerateInvitePost$Json$Params } from '../fn/groups/api-groups-id-regenerate-invite-post-json';
import { apiGroupsIdRegenerateInvitePost$Plain } from '../fn/groups/api-groups-id-regenerate-invite-post-plain';
import { ApiGroupsIdRegenerateInvitePost$Plain$Params } from '../fn/groups/api-groups-id-regenerate-invite-post-plain';
import { apiGroupsJoinPost$Json } from '../fn/groups/api-groups-join-post-json';
import { ApiGroupsJoinPost$Json$Params } from '../fn/groups/api-groups-join-post-json';
import { apiGroupsJoinPost$Plain } from '../fn/groups/api-groups-join-post-plain';
import { ApiGroupsJoinPost$Plain$Params } from '../fn/groups/api-groups-join-post-plain';
import { apiGroupsPost$Json } from '../fn/groups/api-groups-post-json';
import { ApiGroupsPost$Json$Params } from '../fn/groups/api-groups-post-json';
import { apiGroupsPost$Plain } from '../fn/groups/api-groups-post-plain';
import { ApiGroupsPost$Plain$Params } from '../fn/groups/api-groups-post-plain';
import { apiGroupsSearchGet$Json } from '../fn/groups/api-groups-search-get-json';
import { ApiGroupsSearchGet$Json$Params } from '../fn/groups/api-groups-search-get-json';
import { apiGroupsSearchGet$Plain } from '../fn/groups/api-groups-search-get-plain';
import { ApiGroupsSearchGet$Plain$Params } from '../fn/groups/api-groups-search-get-plain';
import { ApiResponse } from '../models/api-response';
import { GroupDtoApiResponse } from '../models/group-dto-api-response';
import { GroupDtoIEnumerableApiResponse } from '../models/group-dto-i-enumerable-api-response';
import { GroupMemberDtoIEnumerableApiResponse } from '../models/group-member-dto-i-enumerable-api-response';
import { ObjectApiResponse } from '../models/object-api-response';

@Injectable({ providedIn: 'root' })
export class GroupsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiGroupsGet()` */
  static readonly ApiGroupsGetPath = '/api/Groups';

  /**
   * Gets all groups for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGet$Plain$Response(params?: ApiGroupsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoIEnumerableApiResponse>> {
    return apiGroupsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all groups for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGet$Plain(params?: ApiGroupsGet$Plain$Params, context?: HttpContext): Observable<GroupDtoIEnumerableApiResponse> {
    return this.apiGroupsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoIEnumerableApiResponse>): GroupDtoIEnumerableApiResponse => r.body)
    );
  }

  /**
   * Gets all groups for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGet$Json$Response(params?: ApiGroupsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoIEnumerableApiResponse>> {
    return apiGroupsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all groups for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsGet$Json(params?: ApiGroupsGet$Json$Params, context?: HttpContext): Observable<GroupDtoIEnumerableApiResponse> {
    return this.apiGroupsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoIEnumerableApiResponse>): GroupDtoIEnumerableApiResponse => r.body)
    );
  }

  /** Path part for operation `apiGroupsPost()` */
  static readonly ApiGroupsPostPath = '/api/Groups';

  /**
   * Creates a new group.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsPost$Plain$Response(params?: ApiGroupsPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoApiResponse>> {
    return apiGroupsPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new group.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsPost$Plain(params?: ApiGroupsPost$Plain$Params, context?: HttpContext): Observable<GroupDtoApiResponse> {
    return this.apiGroupsPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoApiResponse>): GroupDtoApiResponse => r.body)
    );
  }

  /**
   * Creates a new group.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsPost$Json$Response(params?: ApiGroupsPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoApiResponse>> {
    return apiGroupsPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new group.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsPost$Json(params?: ApiGroupsPost$Json$Params, context?: HttpContext): Observable<GroupDtoApiResponse> {
    return this.apiGroupsPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoApiResponse>): GroupDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiGroupsIdGet()` */
  static readonly ApiGroupsIdGetPath = '/api/Groups/{id}';

  /**
   * Gets group information by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdGet$Plain$Response(params: ApiGroupsIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoApiResponse>> {
    return apiGroupsIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets group information by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdGet$Plain(params: ApiGroupsIdGet$Plain$Params, context?: HttpContext): Observable<GroupDtoApiResponse> {
    return this.apiGroupsIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoApiResponse>): GroupDtoApiResponse => r.body)
    );
  }

  /**
   * Gets group information by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdGet$Json$Response(params: ApiGroupsIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoApiResponse>> {
    return apiGroupsIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets group information by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdGet$Json(params: ApiGroupsIdGet$Json$Params, context?: HttpContext): Observable<GroupDtoApiResponse> {
    return this.apiGroupsIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoApiResponse>): GroupDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiGroupsIdDelete()` */
  static readonly ApiGroupsIdDeletePath = '/api/Groups/{id}';

  /**
   * Deletes a group (admin only).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdDelete$Plain$Response(params: ApiGroupsIdDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<(ObjectApiResponse | ApiResponse)>> {
    return apiGroupsIdDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes a group (admin only).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdDelete$Plain(params: ApiGroupsIdDelete$Plain$Params, context?: HttpContext): Observable<(ObjectApiResponse | ApiResponse)> {
    return this.apiGroupsIdDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<(ObjectApiResponse | ApiResponse)>): (ObjectApiResponse | ApiResponse) => r.body)
    );
  }

  /**
   * Deletes a group (admin only).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdDelete$Json$Response(params: ApiGroupsIdDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<(ObjectApiResponse | ApiResponse)>> {
    return apiGroupsIdDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes a group (admin only).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdDelete$Json(params: ApiGroupsIdDelete$Json$Params, context?: HttpContext): Observable<(ObjectApiResponse | ApiResponse)> {
    return this.apiGroupsIdDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<(ObjectApiResponse | ApiResponse)>): (ObjectApiResponse | ApiResponse) => r.body)
    );
  }

  /** Path part for operation `apiGroupsJoinPost()` */
  static readonly ApiGroupsJoinPostPath = '/api/Groups/join';

  /**
   * Joins a group using invite code.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsJoinPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsJoinPost$Plain$Response(params?: ApiGroupsJoinPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoApiResponse>> {
    return apiGroupsJoinPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Joins a group using invite code.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsJoinPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsJoinPost$Plain(params?: ApiGroupsJoinPost$Plain$Params, context?: HttpContext): Observable<GroupDtoApiResponse> {
    return this.apiGroupsJoinPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoApiResponse>): GroupDtoApiResponse => r.body)
    );
  }

  /**
   * Joins a group using invite code.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsJoinPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsJoinPost$Json$Response(params?: ApiGroupsJoinPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoApiResponse>> {
    return apiGroupsJoinPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Joins a group using invite code.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsJoinPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsJoinPost$Json(params?: ApiGroupsJoinPost$Json$Params, context?: HttpContext): Observable<GroupDtoApiResponse> {
    return this.apiGroupsJoinPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoApiResponse>): GroupDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiGroupsIdLeavePost()` */
  static readonly ApiGroupsIdLeavePostPath = '/api/Groups/{id}/leave';

  /**
   * Leaves a group.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdLeavePost$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdLeavePost$Plain$Response(params: ApiGroupsIdLeavePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<(ObjectApiResponse | ApiResponse)>> {
    return apiGroupsIdLeavePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Leaves a group.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdLeavePost$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdLeavePost$Plain(params: ApiGroupsIdLeavePost$Plain$Params, context?: HttpContext): Observable<(ObjectApiResponse | ApiResponse)> {
    return this.apiGroupsIdLeavePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<(ObjectApiResponse | ApiResponse)>): (ObjectApiResponse | ApiResponse) => r.body)
    );
  }

  /**
   * Leaves a group.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdLeavePost$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdLeavePost$Json$Response(params: ApiGroupsIdLeavePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<(ObjectApiResponse | ApiResponse)>> {
    return apiGroupsIdLeavePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Leaves a group.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdLeavePost$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdLeavePost$Json(params: ApiGroupsIdLeavePost$Json$Params, context?: HttpContext): Observable<(ObjectApiResponse | ApiResponse)> {
    return this.apiGroupsIdLeavePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<(ObjectApiResponse | ApiResponse)>): (ObjectApiResponse | ApiResponse) => r.body)
    );
  }

  /** Path part for operation `apiGroupsIdMembersGet()` */
  static readonly ApiGroupsIdMembersGetPath = '/api/Groups/{id}/members';

  /**
   * Gets all members of a group.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdMembersGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdMembersGet$Plain$Response(params: ApiGroupsIdMembersGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupMemberDtoIEnumerableApiResponse>> {
    return apiGroupsIdMembersGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all members of a group.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdMembersGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdMembersGet$Plain(params: ApiGroupsIdMembersGet$Plain$Params, context?: HttpContext): Observable<GroupMemberDtoIEnumerableApiResponse> {
    return this.apiGroupsIdMembersGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupMemberDtoIEnumerableApiResponse>): GroupMemberDtoIEnumerableApiResponse => r.body)
    );
  }

  /**
   * Gets all members of a group.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdMembersGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdMembersGet$Json$Response(params: ApiGroupsIdMembersGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupMemberDtoIEnumerableApiResponse>> {
    return apiGroupsIdMembersGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all members of a group.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdMembersGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdMembersGet$Json(params: ApiGroupsIdMembersGet$Json$Params, context?: HttpContext): Observable<GroupMemberDtoIEnumerableApiResponse> {
    return this.apiGroupsIdMembersGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupMemberDtoIEnumerableApiResponse>): GroupMemberDtoIEnumerableApiResponse => r.body)
    );
  }

  /** Path part for operation `apiGroupsIdMembersUserIdMakeAdminPost()` */
  static readonly ApiGroupsIdMembersUserIdMakeAdminPostPath = '/api/Groups/{id}/members/{userId}/make-admin';

  /**
   * Promotes a member to admin role.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdMembersUserIdMakeAdminPost$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdMembersUserIdMakeAdminPost$Plain$Response(params: ApiGroupsIdMembersUserIdMakeAdminPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<(ObjectApiResponse | ApiResponse)>> {
    return apiGroupsIdMembersUserIdMakeAdminPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Promotes a member to admin role.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdMembersUserIdMakeAdminPost$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdMembersUserIdMakeAdminPost$Plain(params: ApiGroupsIdMembersUserIdMakeAdminPost$Plain$Params, context?: HttpContext): Observable<(ObjectApiResponse | ApiResponse)> {
    return this.apiGroupsIdMembersUserIdMakeAdminPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<(ObjectApiResponse | ApiResponse)>): (ObjectApiResponse | ApiResponse) => r.body)
    );
  }

  /**
   * Promotes a member to admin role.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdMembersUserIdMakeAdminPost$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdMembersUserIdMakeAdminPost$Json$Response(params: ApiGroupsIdMembersUserIdMakeAdminPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<(ObjectApiResponse | ApiResponse)>> {
    return apiGroupsIdMembersUserIdMakeAdminPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Promotes a member to admin role.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdMembersUserIdMakeAdminPost$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdMembersUserIdMakeAdminPost$Json(params: ApiGroupsIdMembersUserIdMakeAdminPost$Json$Params, context?: HttpContext): Observable<(ObjectApiResponse | ApiResponse)> {
    return this.apiGroupsIdMembersUserIdMakeAdminPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<(ObjectApiResponse | ApiResponse)>): (ObjectApiResponse | ApiResponse) => r.body)
    );
  }

  /** Path part for operation `apiGroupsSearchGet()` */
  static readonly ApiGroupsSearchGetPath = '/api/Groups/search';

  /**
   * Searches for public groups.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsSearchGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsSearchGet$Plain$Response(params?: ApiGroupsSearchGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<(ObjectApiResponse | ApiResponse)>> {
    return apiGroupsSearchGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Searches for public groups.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsSearchGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsSearchGet$Plain(params?: ApiGroupsSearchGet$Plain$Params, context?: HttpContext): Observable<(ObjectApiResponse | ApiResponse)> {
    return this.apiGroupsSearchGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<(ObjectApiResponse | ApiResponse)>): (ObjectApiResponse | ApiResponse) => r.body)
    );
  }

  /**
   * Searches for public groups.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsSearchGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsSearchGet$Json$Response(params?: ApiGroupsSearchGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<(ObjectApiResponse | ApiResponse)>> {
    return apiGroupsSearchGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Searches for public groups.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsSearchGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsSearchGet$Json(params?: ApiGroupsSearchGet$Json$Params, context?: HttpContext): Observable<(ObjectApiResponse | ApiResponse)> {
    return this.apiGroupsSearchGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<(ObjectApiResponse | ApiResponse)>): (ObjectApiResponse | ApiResponse) => r.body)
    );
  }

  /** Path part for operation `apiGroupsIdNamePut()` */
  static readonly ApiGroupsIdNamePutPath = '/api/Groups/{id}/name';

  /**
   * Updates a group's name (any member can do this).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdNamePut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsIdNamePut$Plain$Response(params: ApiGroupsIdNamePut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoApiResponse>> {
    return apiGroupsIdNamePut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a group's name (any member can do this).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdNamePut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsIdNamePut$Plain(params: ApiGroupsIdNamePut$Plain$Params, context?: HttpContext): Observable<GroupDtoApiResponse> {
    return this.apiGroupsIdNamePut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoApiResponse>): GroupDtoApiResponse => r.body)
    );
  }

  /**
   * Updates a group's name (any member can do this).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdNamePut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsIdNamePut$Json$Response(params: ApiGroupsIdNamePut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoApiResponse>> {
    return apiGroupsIdNamePut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a group's name (any member can do this).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdNamePut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGroupsIdNamePut$Json(params: ApiGroupsIdNamePut$Json$Params, context?: HttpContext): Observable<GroupDtoApiResponse> {
    return this.apiGroupsIdNamePut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoApiResponse>): GroupDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiGroupsIdRegenerateInvitePost()` */
  static readonly ApiGroupsIdRegenerateInvitePostPath = '/api/Groups/{id}/regenerate-invite';

  /**
   * Regenerates the group's invite code (admin only).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdRegenerateInvitePost$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdRegenerateInvitePost$Plain$Response(params: ApiGroupsIdRegenerateInvitePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoApiResponse>> {
    return apiGroupsIdRegenerateInvitePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Regenerates the group's invite code (admin only).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdRegenerateInvitePost$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdRegenerateInvitePost$Plain(params: ApiGroupsIdRegenerateInvitePost$Plain$Params, context?: HttpContext): Observable<GroupDtoApiResponse> {
    return this.apiGroupsIdRegenerateInvitePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoApiResponse>): GroupDtoApiResponse => r.body)
    );
  }

  /**
   * Regenerates the group's invite code (admin only).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGroupsIdRegenerateInvitePost$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdRegenerateInvitePost$Json$Response(params: ApiGroupsIdRegenerateInvitePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupDtoApiResponse>> {
    return apiGroupsIdRegenerateInvitePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Regenerates the group's invite code (admin only).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGroupsIdRegenerateInvitePost$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGroupsIdRegenerateInvitePost$Json(params: ApiGroupsIdRegenerateInvitePost$Json$Params, context?: HttpContext): Observable<GroupDtoApiResponse> {
    return this.apiGroupsIdRegenerateInvitePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupDtoApiResponse>): GroupDtoApiResponse => r.body)
    );
  }

}
