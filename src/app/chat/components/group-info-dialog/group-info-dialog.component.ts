import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { GroupsService } from '../../../api/services/groups.service';
import { ToastService } from '../../../shared/services/toast.service';
import { CommonInputComponent } from '../../../shared/components/common-form-controls/common-input.component';
import { CommonButtonComponent } from '../../../shared/components/common-form-controls/common-button.component';
import { CommonToggleComponent } from '../../../shared/components/common-form-controls/common-toggle.component';
import { SkeletonLoaderComponent } from '../../../shared/components/skeleton-loader/skeleton-loader.component';
import { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';
import { TabsComponent, Tab } from '../../../shared/components/tabs/tabs.component';
import { CompactMemberListComponent } from '../compact-member-list/compact-member-list.component';
import { GroupDto } from '../../../api/models/group-dto';
import { GroupMemberDto } from '../../../api/models/group-member-dto';
import { CommonTooltipDirective } from '../../../shared/components/common-tooltip';

/**
 * Production-ready Group Info Dialog Component with MNC coding standards
 *
 * Features:
 * - Tabbed interface (General, Members, Settings)
 * - Member management with admin controls
 * - API integration using autogenerated models
 * - Accessible markup with ARIA attributes
 * - OnPush change detection for performance
 * - Permission-based UI controls
 * - Skeleton loading states
 *
 * @example
 * ```typescript
 * <app-group-info-dialog
 *   [groupId]="selectedGroupId"
 *   [currentUserId]="currentUserId"
 *   (closed)="onDialogClose()"
 *   (groupUpdated)="onGroupUpdated()"
 *   (groupDeleted)="onGroupDeleted($event)">
 * </app-group-info-dialog>
 * ```
 */
@Component({
  selector: 'app-group-info-dialog',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    CommonInputComponent,
    CommonButtonComponent,
    CommonToggleComponent,
    SkeletonLoaderComponent,
    ConfirmationDialogComponent,
    TabsComponent,
    CompactMemberListComponent,
    CommonTooltipDirective
  ],
  templateUrl: './group-info-dialog.component.html',
  styleUrls: ['./group-info-dialog.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class GroupInfoDialogComponent implements OnInit {
  @Input() groupId!: string;
  @Input() currentUserId!: string;
  @Input() triggerDelete = false; // Auto-trigger delete confirmation when true
  @Output() closed = new EventEmitter<void>();
  @Output() updated = new EventEmitter<GroupDto>();
  @Output() deleted = new EventEmitter<string>();
  @Output() membershipChange = new EventEmitter<{ userId: string; action: 'remove' | 'makeAdmin' }>();

  // Tabs configuration
  tabs: Tab[] = [
    { id: 'general', label: 'General', icon: 'bi-info-circle' },
    { id: 'members', label: 'Members', icon: 'bi-people' },
    { id: 'settings', label: 'Settings', icon: 'bi-gear' }
  ];
  activeTab: string = 'general';

  // Data
  group: GroupDto | null = null;
  members: GroupMemberDto[] = [];
  groupInfoForm!: FormGroup;

  // Loading states
  isLoadingGroup = true;
  isLoadingMembers = false;
  isUpdating = false;
  isDeleting = false;
  processingUserId: string | null = null;

  // Confirmation dialogs
  showDeleteConfirmation = false;
  showRemoveMemberConfirmation = false;
  memberToRemove: GroupMemberDto | null = null;

  constructor(
    private fb: FormBuilder,
    private groupsService: GroupsService,
    private toastService: ToastService,
    private router: Router,
    private cdr: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    this.groupInfoForm = this.fb.group({
      groupName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],
      isPublic: [false]
    });

    this.loadGroupDetails();

    // Auto-trigger delete confirmation if requested
    if (this.triggerDelete) {
      setTimeout(() => {
        this.showDeleteDialog();
      }, 100);
    }
  }

  /**
   * Load group details from API
   */
  private loadGroupDetails(): void {
    this.isLoadingGroup = true;
    this.cdr.markForCheck();

    this.groupsService.apiGroupsIdGet$Json({ id: this.groupId }).subscribe({
      next: (response) => {
        this.isLoadingGroup = false;
        if (response.success && response.data) {
          this.group = response.data;
          this.groupInfoForm.patchValue({
            groupName: this.group.name || '',
            isPublic: this.group.isPublic || false
          });
          this.cdr.markForCheck();
        } else {
          this.toastService.showError('Failed to load group details', 'Error');
          this.cdr.markForCheck();
        }
      },
      error: (error) => {
        this.isLoadingGroup = false;
        const errorMessage = error?.error?.message || error?.message || 'Failed to load group details';
        this.toastService.showError(errorMessage, 'Error');
        this.cdr.markForCheck();
      }
    });
  }

  /**
   * Load group members from API
   */
  private loadMembers(): void {
    this.isLoadingMembers = true;
    this.cdr.markForCheck();

    this.groupsService.apiGroupsIdMembersGet$Json({ id: this.groupId }).subscribe({
      next: (response) => {
        this.isLoadingMembers = false;
        if (response.success && response.data) {
          this.members = response.data;
          this.cdr.markForCheck();
        } else {
          this.toastService.showError('Failed to load members', 'Error');
          this.cdr.markForCheck();
        }
      },
      error: (error) => {
        this.isLoadingMembers = false;
        const errorMessage = error?.error?.message || error?.message || 'Failed to load members';
        this.toastService.showError(errorMessage, 'Error');
        this.cdr.markForCheck();
      }
    });
  }

  /**
   * Handle tab change
   */
  onTabChange(tabId: string): void {
    this.activeTab = tabId;

    // Load members when switching to Members tab
    if (tabId === 'members' && this.members.length === 0) {
      this.loadMembers();
    }

    this.cdr.markForCheck();
  }

  /**
   * Check if current user is admin
   */
  get isAdmin(): boolean {
    if (!this.members || !this.currentUserId) {
      return false;
    }
    return this.members.some(m => m.userId === this.currentUserId && m.role === 'admin');
  }

  getFieldError(fieldName: string): boolean {
    const field = this.groupInfoForm.get(fieldName);
    return !!(field && field.invalid && (field.dirty || field.touched));
  }

  getErrorMessage(fieldName: string): string {
    const field = this.groupInfoForm.get(fieldName);
    if (!field || !field.errors) {
      return '';
    }

    if (field.errors['required']) {
      return 'Group name is required';
    }
    if (field.errors['minlength']) {
      return 'Group name must be at least 3 characters';
    }
    if (field.errors['maxlength']) {
      return 'Group name must not exceed 50 characters';
    }
    return '';
  }

  /**
   * Submit group updates
   */
  onSubmit(): void {
    if (this.groupInfoForm.invalid || this.isUpdating) {
      return;
    }

    this.isUpdating = true;
    this.cdr.markForCheck();

    const formValue = this.groupInfoForm.value;
    const groupName = formValue.groupName.trim();

    // Update group name
    this.groupsService.apiGroupsIdNamePut$Json({
      id: this.groupId,
      body: {
        name: groupName
      }
    }).subscribe({
      next: (response) => {
        this.isUpdating = false;
        if (response.success) {
          this.toastService.showSuccess('Group information updated.', 'Success');
          if (this.group) {
            this.group.name = groupName;
          }
          this.updated.emit(this.group!);
          this.groupInfoForm.markAsPristine();
          this.cdr.markForCheck();
        } else {
          this.toastService.showError(response.message || 'Failed to update group', 'Error');
          this.cdr.markForCheck();
        }
      },
      error: (error) => {
        this.isUpdating = false;
        const errorMessage = error?.error?.message || error?.message || 'Failed to update group. Please try again.';
        this.toastService.showError(errorMessage, 'Error');
        this.cdr.markForCheck();
      }
    });
  }

  /**
   * Make a member an admin
   */
  onMakeAdmin(userId: string): void {
    if (!this.isAdmin || this.processingUserId) {
      return;
    }

    this.processingUserId = userId;
    this.cdr.markForCheck();

    this.groupsService.apiGroupsIdMembersUserIdMakeAdminPost$Json({
      id: this.groupId,
      userId: userId
    }).subscribe({
      next: (response) => {
        this.processingUserId = null;
        if (response.success) {
          this.toastService.showSuccess('Member promoted to admin', 'Success');
          // Update local member role
          const member = this.members.find(m => m.userId === userId);
          if (member) {
            member.role = 'admin';
          }
          this.membershipChange.emit({ userId, action: 'makeAdmin' });
          this.cdr.markForCheck();
        } else {
          this.toastService.showError(response.message || 'Failed to make admin', 'Error');
          this.cdr.markForCheck();
        }
      },
      error: (error) => {
        this.processingUserId = null;
        const errorMessage = error?.error?.message || error?.message || 'Failed to make admin';
        this.toastService.showError(errorMessage, 'Error');
        this.cdr.markForCheck();
      }
    });
  }

  /**
   * Show remove member confirmation
   */
  onRemoveMember(userId: string): void {
    const member = this.members.find(m => m.userId === userId);
    if (member) {
      this.memberToRemove = member;
      this.showRemoveMemberConfirmation = true;
      this.cdr.markForCheck();
    }
  }

  /**
   * Confirm remove member
   */
  confirmRemoveMember(): void {
    if (!this.memberToRemove || this.processingUserId) {
      return;
    }

    const userId = this.memberToRemove.userId;
    if (!userId) {
      return;
    }

    this.processingUserId = userId;
    this.cdr.markForCheck();

    // TODO: API endpoint for removing member doesn't exist yet
    // When available, implement: this.groupsService.apiGroupsIdMembersUserIdDelete$Json(...)
    // For now, show a message that this feature is not yet implemented

    this.processingUserId = null;
    this.showRemoveMemberConfirmation = false;
    this.memberToRemove = null;
    this.toastService.showError('Remove member feature is not available yet.', 'Not Available');
    this.cdr.markForCheck();

    // Example implementation when API is available:
    /*
    this.groupsService.apiGroupsIdMembersUserIdDelete$Json({
      id: this.groupId,
      userId: userId
    }).subscribe({
      next: (response) => {
        this.processingUserId = null;
        this.showRemoveMemberConfirmation = false;
        this.memberToRemove = null;
        if (response.success) {
          this.toastService.showSuccess('Member removed from group', 'Success');
          // Remove from local array
          this.members = this.members.filter(m => m.userId !== userId);
          this.membershipChange.emit({ userId, action: 'remove' });
          this.cdr.markForCheck();
        } else {
          this.toastService.showError(response.message || 'Failed to remove member', 'Error');
          this.cdr.markForCheck();
        }
      },
      error: (error) => {
        this.processingUserId = null;
        this.showRemoveMemberConfirmation = false;
        this.memberToRemove = null;
        const errorMessage = error?.error?.message || error?.message || 'Failed to remove member';
        this.toastService.showError(errorMessage, 'Error');
        this.cdr.markForCheck();
      }
    });
    */
  }

  /**
   * Cancel remove member
   */
  cancelRemoveMember(): void {
    this.showRemoveMemberConfirmation = false;
    this.memberToRemove = null;
    this.cdr.markForCheck();
  }

  /**
   * Handle member click (navigate to profile)
   */
  onMemberClick(userId: string): void {
    // TODO: Implement navigation to user profile or emit event
    console.log('Navigate to user profile:', userId);
  }

  /**
 * Tooltip for the Delete Group button
 */
  get deleteGroupTooltip(): string {
    if (this.isDeleting) {
      return 'Deleting group...';
    }
    if (!this.isAdmin) {
      return 'Only group admins can delete this group';
    }
    return 'Permanently delete this group';
  }

  /**
   * Handle delete button click
   */
  onDeleteClick(): void {
    if (!this.isAdmin || this.isDeleting) {
      return;
    }
    this.showDeleteDialog();
  }

  closeDialog(): void {
    this.closed.emit();
  }

  /**
   * Show delete confirmation dialog
   */
  showDeleteDialog(): void {
    this.showDeleteConfirmation = true;
    this.cdr.markForCheck();
  }

  /**
   * Cancel delete operation
   */
  cancelDelete(): void {
    this.showDeleteConfirmation = false;
    this.cdr.markForCheck();
  }

  /**
   * Confirm and execute group deletion
   */
  confirmDelete(): void {
    if (this.isDeleting || !this.groupId) {
      return;
    }

    this.isDeleting = true;
    this.cdr.markForCheck();

    this.groupsService.apiGroupsIdDelete$Json({ id: this.groupId }).subscribe({
      next: (response) => {
        this.isDeleting = false;
        this.showDeleteConfirmation = false;

        if (response.success) {
          this.toastService.showSuccess(
            'Group and all associated data have been permanently deleted.',
            'Group Deleted'
          );

          this.deleted.emit(this.groupId);
          this.closeDialog();
          this.router.navigate(['/chat']);
        } else {
          this.toastService.showError(
            response.message || 'Failed to delete group',
            'Delete Failed'
          );
          this.cdr.markForCheck();
        }
      },
      error: (error) => {
        this.isDeleting = false;
        this.showDeleteConfirmation = false;

        const errorMessage = error?.error?.message
          || error?.message
          || 'Failed to delete group. Please try again.';

        this.toastService.showError(errorMessage, 'Delete Failed');
        this.cdr.markForCheck();
      }
    });
  }
}
